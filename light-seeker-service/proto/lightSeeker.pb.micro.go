// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lightSeeker.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	proto1 "light-up-backend/common/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LightSeekerService service

type LightSeekerService interface {
	CreateLightSeeker(ctx context.Context, in *LightSeekerRequest, opts ...client.CallOption) (*LightSeekerResponse, error)
	GetLightSeekerById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LightSeekerResponse, error)
	GetLightSeekerByEmail(ctx context.Context, in *proto1.EmailRequest, opts ...client.CallOption) (*LightSeekerResponse, error)
	GetLightSeekers(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*LightSeekerResponse, error)
	ValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LightSeekerResponse, error)
	InValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LightSeekerResponse, error)
}

type lightSeekerService struct {
	c    client.Client
	name string
}

func NewLightSeekerService(name string, c client.Client) LightSeekerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &lightSeekerService{
		c:    c,
		name: name,
	}
}

func (c *lightSeekerService) CreateLightSeeker(ctx context.Context, in *LightSeekerRequest, opts ...client.CallOption) (*LightSeekerResponse, error) {
	req := c.c.NewRequest(c.name, "LightSeekerService.CreateLightSeeker", in)
	out := new(LightSeekerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightSeekerService) GetLightSeekerById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LightSeekerResponse, error) {
	req := c.c.NewRequest(c.name, "LightSeekerService.GetLightSeekerById", in)
	out := new(LightSeekerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightSeekerService) GetLightSeekerByEmail(ctx context.Context, in *proto1.EmailRequest, opts ...client.CallOption) (*LightSeekerResponse, error) {
	req := c.c.NewRequest(c.name, "LightSeekerService.GetLightSeekerByEmail", in)
	out := new(LightSeekerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightSeekerService) GetLightSeekers(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*LightSeekerResponse, error) {
	req := c.c.NewRequest(c.name, "LightSeekerService.GetLightSeekers", in)
	out := new(LightSeekerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightSeekerService) ValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LightSeekerResponse, error) {
	req := c.c.NewRequest(c.name, "LightSeekerService.ValidateLightSeekerUser", in)
	out := new(LightSeekerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightSeekerService) InValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LightSeekerResponse, error) {
	req := c.c.NewRequest(c.name, "LightSeekerService.InValidateLightSeekerUser", in)
	out := new(LightSeekerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LightSeekerService service

type LightSeekerServiceHandler interface {
	CreateLightSeeker(context.Context, *LightSeekerRequest, *LightSeekerResponse) error
	GetLightSeekerById(context.Context, *proto1.IdRequest, *LightSeekerResponse) error
	GetLightSeekerByEmail(context.Context, *proto1.EmailRequest, *LightSeekerResponse) error
	GetLightSeekers(context.Context, *proto1.Empty, *LightSeekerResponse) error
	ValidateLightSeekerUser(context.Context, *proto1.IdRequest, *LightSeekerResponse) error
	InValidateLightSeekerUser(context.Context, *proto1.IdRequest, *LightSeekerResponse) error
}

func RegisterLightSeekerServiceHandler(s server.Server, hdlr LightSeekerServiceHandler, opts ...server.HandlerOption) error {
	type lightSeekerService interface {
		CreateLightSeeker(ctx context.Context, in *LightSeekerRequest, out *LightSeekerResponse) error
		GetLightSeekerById(ctx context.Context, in *proto1.IdRequest, out *LightSeekerResponse) error
		GetLightSeekerByEmail(ctx context.Context, in *proto1.EmailRequest, out *LightSeekerResponse) error
		GetLightSeekers(ctx context.Context, in *proto1.Empty, out *LightSeekerResponse) error
		ValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, out *LightSeekerResponse) error
		InValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, out *LightSeekerResponse) error
	}
	type LightSeekerService struct {
		lightSeekerService
	}
	h := &lightSeekerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LightSeekerService{h}, opts...))
}

type lightSeekerServiceHandler struct {
	LightSeekerServiceHandler
}

func (h *lightSeekerServiceHandler) CreateLightSeeker(ctx context.Context, in *LightSeekerRequest, out *LightSeekerResponse) error {
	return h.LightSeekerServiceHandler.CreateLightSeeker(ctx, in, out)
}

func (h *lightSeekerServiceHandler) GetLightSeekerById(ctx context.Context, in *proto1.IdRequest, out *LightSeekerResponse) error {
	return h.LightSeekerServiceHandler.GetLightSeekerById(ctx, in, out)
}

func (h *lightSeekerServiceHandler) GetLightSeekerByEmail(ctx context.Context, in *proto1.EmailRequest, out *LightSeekerResponse) error {
	return h.LightSeekerServiceHandler.GetLightSeekerByEmail(ctx, in, out)
}

func (h *lightSeekerServiceHandler) GetLightSeekers(ctx context.Context, in *proto1.Empty, out *LightSeekerResponse) error {
	return h.LightSeekerServiceHandler.GetLightSeekers(ctx, in, out)
}

func (h *lightSeekerServiceHandler) ValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, out *LightSeekerResponse) error {
	return h.LightSeekerServiceHandler.ValidateLightSeekerUser(ctx, in, out)
}

func (h *lightSeekerServiceHandler) InValidateLightSeekerUser(ctx context.Context, in *proto1.IdRequest, out *LightSeekerResponse) error {
	return h.LightSeekerServiceHandler.InValidateLightSeekerUser(ctx, in, out)
}
