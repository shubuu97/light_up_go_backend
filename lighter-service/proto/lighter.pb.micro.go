// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lighter.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	proto1 "light-up-backend/common/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LighterService service

type LighterService interface {
	CreateLighter(ctx context.Context, in *Lighter, opts ...client.CallOption) (*LighterResponse, error)
	GetLighterById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error)
	GetLighterByEmail(ctx context.Context, in *proto1.EmailRequest, opts ...client.CallOption) (*LighterResponse, error)
	GetLighters(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*LighterResponse, error)
	VerifyLighterUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error)
	ValidateLighterUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error)
	InValidateLighterUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error)
}

type lighterService struct {
	c    client.Client
	name string
}

func NewLighterService(name string, c client.Client) LighterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &lighterService{
		c:    c,
		name: name,
	}
}

func (c *lighterService) CreateLighter(ctx context.Context, in *Lighter, opts ...client.CallOption) (*LighterResponse, error) {
	req := c.c.NewRequest(c.name, "LighterService.CreateLighter", in)
	out := new(LighterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterService) GetLighterById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error) {
	req := c.c.NewRequest(c.name, "LighterService.GetLighterById", in)
	out := new(LighterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterService) GetLighterByEmail(ctx context.Context, in *proto1.EmailRequest, opts ...client.CallOption) (*LighterResponse, error) {
	req := c.c.NewRequest(c.name, "LighterService.GetLighterByEmail", in)
	out := new(LighterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterService) GetLighters(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*LighterResponse, error) {
	req := c.c.NewRequest(c.name, "LighterService.GetLighters", in)
	out := new(LighterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterService) VerifyLighterUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error) {
	req := c.c.NewRequest(c.name, "LighterService.VerifyLighterUser", in)
	out := new(LighterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterService) ValidateLighterUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error) {
	req := c.c.NewRequest(c.name, "LighterService.ValidateLighterUser", in)
	out := new(LighterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterService) InValidateLighterUser(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*LighterResponse, error) {
	req := c.c.NewRequest(c.name, "LighterService.InValidateLighterUser", in)
	out := new(LighterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LighterService service

type LighterServiceHandler interface {
	CreateLighter(context.Context, *Lighter, *LighterResponse) error
	GetLighterById(context.Context, *proto1.IdRequest, *LighterResponse) error
	GetLighterByEmail(context.Context, *proto1.EmailRequest, *LighterResponse) error
	GetLighters(context.Context, *proto1.Empty, *LighterResponse) error
	VerifyLighterUser(context.Context, *proto1.IdRequest, *LighterResponse) error
	ValidateLighterUser(context.Context, *proto1.IdRequest, *LighterResponse) error
	InValidateLighterUser(context.Context, *proto1.IdRequest, *LighterResponse) error
}

func RegisterLighterServiceHandler(s server.Server, hdlr LighterServiceHandler, opts ...server.HandlerOption) error {
	type lighterService interface {
		CreateLighter(ctx context.Context, in *Lighter, out *LighterResponse) error
		GetLighterById(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error
		GetLighterByEmail(ctx context.Context, in *proto1.EmailRequest, out *LighterResponse) error
		GetLighters(ctx context.Context, in *proto1.Empty, out *LighterResponse) error
		VerifyLighterUser(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error
		ValidateLighterUser(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error
		InValidateLighterUser(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error
	}
	type LighterService struct {
		lighterService
	}
	h := &lighterServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LighterService{h}, opts...))
}

type lighterServiceHandler struct {
	LighterServiceHandler
}

func (h *lighterServiceHandler) CreateLighter(ctx context.Context, in *Lighter, out *LighterResponse) error {
	return h.LighterServiceHandler.CreateLighter(ctx, in, out)
}

func (h *lighterServiceHandler) GetLighterById(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error {
	return h.LighterServiceHandler.GetLighterById(ctx, in, out)
}

func (h *lighterServiceHandler) GetLighterByEmail(ctx context.Context, in *proto1.EmailRequest, out *LighterResponse) error {
	return h.LighterServiceHandler.GetLighterByEmail(ctx, in, out)
}

func (h *lighterServiceHandler) GetLighters(ctx context.Context, in *proto1.Empty, out *LighterResponse) error {
	return h.LighterServiceHandler.GetLighters(ctx, in, out)
}

func (h *lighterServiceHandler) VerifyLighterUser(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error {
	return h.LighterServiceHandler.VerifyLighterUser(ctx, in, out)
}

func (h *lighterServiceHandler) ValidateLighterUser(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error {
	return h.LighterServiceHandler.ValidateLighterUser(ctx, in, out)
}

func (h *lighterServiceHandler) InValidateLighterUser(ctx context.Context, in *proto1.IdRequest, out *LighterResponse) error {
	return h.LighterServiceHandler.InValidateLighterUser(ctx, in, out)
}
