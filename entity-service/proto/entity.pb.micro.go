// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: entity.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "light-up-backend/common/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EntityService service

type EntityService interface {
	// Education Qualification
	AddEducationQualification(ctx context.Context, in *EducationQualificationRequest, opts ...client.CallOption) (*EducationQualificationResponse, error)
	GetEducationQualificationById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*EducationQualificationResponse, error)
	GetAllEducationQualifications(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*EducationQualificationResponse, error)
	// Occupation
	AddOccupation(ctx context.Context, in *OccupationRequest, opts ...client.CallOption) (*OccupationResponse, error)
	GetOccupationById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*OccupationResponse, error)
	GetAllOccupations(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*OccupationResponse, error)
	// Institutes
	AddInstitute(ctx context.Context, in *InstituteRequest, opts ...client.CallOption) (*InstituteResponse, error)
	GetInstituteById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*InstituteResponse, error)
	GetAllInstitutes(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*InstituteResponse, error)
}

type entityService struct {
	c    client.Client
	name string
}

func NewEntityService(name string, c client.Client) EntityService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &entityService{
		c:    c,
		name: name,
	}
}

func (c *entityService) AddEducationQualification(ctx context.Context, in *EducationQualificationRequest, opts ...client.CallOption) (*EducationQualificationResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.AddEducationQualification", in)
	out := new(EducationQualificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetEducationQualificationById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*EducationQualificationResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetEducationQualificationById", in)
	out := new(EducationQualificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetAllEducationQualifications(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*EducationQualificationResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetAllEducationQualifications", in)
	out := new(EducationQualificationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) AddOccupation(ctx context.Context, in *OccupationRequest, opts ...client.CallOption) (*OccupationResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.AddOccupation", in)
	out := new(OccupationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetOccupationById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*OccupationResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetOccupationById", in)
	out := new(OccupationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetAllOccupations(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*OccupationResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetAllOccupations", in)
	out := new(OccupationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) AddInstitute(ctx context.Context, in *InstituteRequest, opts ...client.CallOption) (*InstituteResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.AddInstitute", in)
	out := new(InstituteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetInstituteById(ctx context.Context, in *proto1.IdRequest, opts ...client.CallOption) (*InstituteResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetInstituteById", in)
	out := new(InstituteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityService) GetAllInstitutes(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*InstituteResponse, error) {
	req := c.c.NewRequest(c.name, "EntityService.GetAllInstitutes", in)
	out := new(InstituteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityService service

type EntityServiceHandler interface {
	// Education Qualification
	AddEducationQualification(context.Context, *EducationQualificationRequest, *EducationQualificationResponse) error
	GetEducationQualificationById(context.Context, *proto1.IdRequest, *EducationQualificationResponse) error
	GetAllEducationQualifications(context.Context, *proto1.Empty, *EducationQualificationResponse) error
	// Occupation
	AddOccupation(context.Context, *OccupationRequest, *OccupationResponse) error
	GetOccupationById(context.Context, *proto1.IdRequest, *OccupationResponse) error
	GetAllOccupations(context.Context, *proto1.Empty, *OccupationResponse) error
	// Institutes
	AddInstitute(context.Context, *InstituteRequest, *InstituteResponse) error
	GetInstituteById(context.Context, *proto1.IdRequest, *InstituteResponse) error
	GetAllInstitutes(context.Context, *proto1.Empty, *InstituteResponse) error
}

func RegisterEntityServiceHandler(s server.Server, hdlr EntityServiceHandler, opts ...server.HandlerOption) error {
	type entityService interface {
		AddEducationQualification(ctx context.Context, in *EducationQualificationRequest, out *EducationQualificationResponse) error
		GetEducationQualificationById(ctx context.Context, in *proto1.IdRequest, out *EducationQualificationResponse) error
		GetAllEducationQualifications(ctx context.Context, in *proto1.Empty, out *EducationQualificationResponse) error
		AddOccupation(ctx context.Context, in *OccupationRequest, out *OccupationResponse) error
		GetOccupationById(ctx context.Context, in *proto1.IdRequest, out *OccupationResponse) error
		GetAllOccupations(ctx context.Context, in *proto1.Empty, out *OccupationResponse) error
		AddInstitute(ctx context.Context, in *InstituteRequest, out *InstituteResponse) error
		GetInstituteById(ctx context.Context, in *proto1.IdRequest, out *InstituteResponse) error
		GetAllInstitutes(ctx context.Context, in *proto1.Empty, out *InstituteResponse) error
	}
	type EntityService struct {
		entityService
	}
	h := &entityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EntityService{h}, opts...))
}

type entityServiceHandler struct {
	EntityServiceHandler
}

func (h *entityServiceHandler) AddEducationQualification(ctx context.Context, in *EducationQualificationRequest, out *EducationQualificationResponse) error {
	return h.EntityServiceHandler.AddEducationQualification(ctx, in, out)
}

func (h *entityServiceHandler) GetEducationQualificationById(ctx context.Context, in *proto1.IdRequest, out *EducationQualificationResponse) error {
	return h.EntityServiceHandler.GetEducationQualificationById(ctx, in, out)
}

func (h *entityServiceHandler) GetAllEducationQualifications(ctx context.Context, in *proto1.Empty, out *EducationQualificationResponse) error {
	return h.EntityServiceHandler.GetAllEducationQualifications(ctx, in, out)
}

func (h *entityServiceHandler) AddOccupation(ctx context.Context, in *OccupationRequest, out *OccupationResponse) error {
	return h.EntityServiceHandler.AddOccupation(ctx, in, out)
}

func (h *entityServiceHandler) GetOccupationById(ctx context.Context, in *proto1.IdRequest, out *OccupationResponse) error {
	return h.EntityServiceHandler.GetOccupationById(ctx, in, out)
}

func (h *entityServiceHandler) GetAllOccupations(ctx context.Context, in *proto1.Empty, out *OccupationResponse) error {
	return h.EntityServiceHandler.GetAllOccupations(ctx, in, out)
}

func (h *entityServiceHandler) AddInstitute(ctx context.Context, in *InstituteRequest, out *InstituteResponse) error {
	return h.EntityServiceHandler.AddInstitute(ctx, in, out)
}

func (h *entityServiceHandler) GetInstituteById(ctx context.Context, in *proto1.IdRequest, out *InstituteResponse) error {
	return h.EntityServiceHandler.GetInstituteById(ctx, in, out)
}

func (h *entityServiceHandler) GetAllInstitutes(ctx context.Context, in *proto1.Empty, out *InstituteResponse) error {
	return h.EntityServiceHandler.GetAllInstitutes(ctx, in, out)
}
