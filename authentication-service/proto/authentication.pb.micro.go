// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: authentication.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "light-up-backend/common/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthenticationService service

type AuthenticationService interface {
	LoginLightSeeker(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	LoginLighter(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	ValidateToken(ctx context.Context, in *TokenValidationRequest, opts ...client.CallOption) (*TokenResponse, error)
}

type authenticationService struct {
	c    client.Client
	name string
}

func NewAuthenticationService(name string, c client.Client) AuthenticationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &authenticationService{
		c:    c,
		name: name,
	}
}

func (c *authenticationService) LoginLightSeeker(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.LoginLightSeeker", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationService) LoginLighter(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.LoginLighter", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationService) ValidateToken(ctx context.Context, in *TokenValidationRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthenticationService.ValidateToken", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthenticationService service

type AuthenticationServiceHandler interface {
	LoginLightSeeker(context.Context, *LoginRequest, *LoginResponse) error
	LoginLighter(context.Context, *LoginRequest, *LoginResponse) error
	ValidateToken(context.Context, *TokenValidationRequest, *TokenResponse) error
}

func RegisterAuthenticationServiceHandler(s server.Server, hdlr AuthenticationServiceHandler, opts ...server.HandlerOption) error {
	type authenticationService interface {
		LoginLightSeeker(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		LoginLighter(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		ValidateToken(ctx context.Context, in *TokenValidationRequest, out *TokenResponse) error
	}
	type AuthenticationService struct {
		authenticationService
	}
	h := &authenticationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthenticationService{h}, opts...))
}

type authenticationServiceHandler struct {
	AuthenticationServiceHandler
}

func (h *authenticationServiceHandler) LoginLightSeeker(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthenticationServiceHandler.LoginLightSeeker(ctx, in, out)
}

func (h *authenticationServiceHandler) LoginLighter(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthenticationServiceHandler.LoginLighter(ctx, in, out)
}

func (h *authenticationServiceHandler) ValidateToken(ctx context.Context, in *TokenValidationRequest, out *TokenResponse) error {
	return h.AuthenticationServiceHandler.ValidateToken(ctx, in, out)
}
